brew install terraform

# On Linux
curl -fsSL -o /usr/local/bin/terraform https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip
chmod +x /usr/local/bin/terraform

# sample provider
provider "aws" {
  region = "us-east-1"
}

# sample file for AWS
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0" # Example AMI ID
  instance_type = "t2.micro"

  tags = {
    Name = "ExampleInstance"
  }
}

terraform init
terraform plan
terraform apply
# careful with below command
terraform destroy

# variables.tf
variable "instance_type" {
  description = "The type of instance to create"
  type        = string
  default     = "t2.micro"
}

# main.tf
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = var.instance_type
}

# outputs.tf
output "instance_ip" {
  description = "The IP address of the instance"
  value       = aws_instance.example.public_ip
}


module "my_vpc" {
  source = "./modules/vpc"
  vpc_cidr = "10.0.0.0/16"
}

terraform {
  backend "gcs" {
    bucket  = "my-terraform-state"  # Name of the Google/AWS Cloud Storage bucket
    prefix  = "path/to/my/key"      # Path within the bucket to store the state file
    location = "US"                 # Location of the bucket (optional)
  }
}

# sample.tf

# provider.tf
provider "aws" {
  region = "us-east-1"
}

# variables.tf
variable "instance_type" {
  type    = string
  default = "t2.micro"
}

# main.tf
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = var.instance_type

  tags = {
    Name = "ExampleInstance"
  }
}

# outputs.tf
output "instance_ip" {
  description = "The IP address of the instance"
  value       = aws_instance.example.public_ip
}


terraform init      # Initialize the working directory
terraform plan      # Show the plan and changes
terraform apply     # Apply the configuration to provision resources
terraform destroy   # Destroy all resources when no longer 


